# --- Persistence configuration file ---
#   Persistence configuration file contains all properties to configuring application components e.g. DataSource,
#   Hibernate EntityManagers, transaction managers .... Application reads configuration properties as key - value pair and configuring
#   it's components with these values.
#   Persistence.properties file has a ------------ sections for configure right components.
#   DataSource section has a three subsection for holding parameters for different active profiles defined in application.properties file
#   with "com.phoenix.application.active_profile" key.
#
#
#   NOTE: Please, don't remove this file and don't remove these keys if these are unused.

# -- Datasources configuration section --
#   Application datasource used to  share data between application and installed database server.
#   DataSource is bottommost level in application - database relationship
#   DataSource configuration section has a three subsection for different active application profiles.
#   Possibly values for active persistence profiles are DEVELOPMENT, PRODUCTION, TEST.
#   NOTE: you may to fill only one subsection for active persistence application profile.Default persistence active profile is DEVELOPMENT.

#   Development DataSource subsection
#   Development DataSource used only for development purposes. DataSource based on Spring DriverManagerDatasource
#   is so slowly for share data in production use. DataSource don't create an any connection pools because get connection
#   for each request is very slow operation.
#   If you wan't to use this type of DataSource you must set these parameters (driver_class, user_name, and user_password has a default values).
#   NOTE: This is default active profile for persistence in application. Default values configured for use a MySQL database.

#   Database URL property. Specify jdbc:vendor://DNS name or IP address:port/database name to connect
#   application to a vendor specific database server. For example to connect to local MySQL server specify
#   "jdbc:mysql://localhost:PORT/DB_NAME" value, where PORT - connection TCP port, DB_NAME - database name.
#   'database_url' has not a default value. You mast manually set these property.
com.phoenix.persistence.datasource.development.database_url = jdbc:mysql://localhost:36548/phoenix

#    Driver class property. Specify name of driver class in the vendor specific driver java library. Because application use
#    a MySQL database server by default application use "com.mysql.cj.jdbc,Driver" class name.
#    If you want to use an another database server you must to follow this instruction:
#   1) Add driver vendor connector library to project library directory.
#   2) Change the vendor field in "com.phoenix.persistence.datasource.development.database_ur" property.
#   3) Set the name of vendor specific driver class to these property.
com.phoenix.persistence.datasource.development.driver_class =

#   User name property. Specify the login of user account to access in database server.
#   Default account user name is "root".
#   NOTE: Usually "root" user is common admin of database server. Log in with may produce security vulnerability.
com.phoenix.persistence.datasource.development.user_name = phoenix-web

#   User password property. Specify the password to user account. Default value fir user password is empty password.
#   NOTE: Use empty password and not secure connections is not safe.
com.phoenix.persistence.datasource.development.user_password = 12345678


#   Production DataSource subsection
#   JNDI Name property. If you are want to use production datasource controlled by application server with connection
#   pooling you must set this property. JNDI-name property is used to finding DataSource in JNDI context by it's name.
#   NOTE: Firstly you must create a resource entry in "META-INT/context.xml" file or globally in server context.xml file.
#   If this property will be empty application will use default jdbc/phoenix value.
com.phoenix.persistence.datasource.production.jndi-name =

# -- Hibernate configuration section --
# Hibernate framework is that object-relation mapping framework that convert application objects (POJO Entities)
# to relation database representation and vise versa. Java Persistence API hasn't implementation.
# Spring configure JPA to use hibernate implementation as default implementation.
# NOTE: all properties has a default values. You may don't configure this properties.


com.phoenix.persistence.hibernate.dialect =
com.phoenix.persistence.hibernate.show_sql =
com.phoenix.persistence.hibernate.generate_statistics =
com.phoenix.persistence.hibernate.use_sql_comments = false
com.phoenix.persistence.hibernate.hbm2ddl.auto = update